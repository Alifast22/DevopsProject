trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3d847cce-1bca-4c84-bb97-65a1fa860463'
  imageRepository: 'devopsmovieproject'
  containerRegistry: 'movieproject.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:


- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - script: |
        # Configure Git
        git config --global user.name "azure-pipelines"
        git config --global user.email "azure-pipelines@azure.com"

        # Check if the Azure Repos remote exists
        if git ls-remote --exit-code azure; then
          echo "Azure remote already exists"
        else
          echo "Adding Azure remote"
          git remote add azure https://$(System.AccessToken)@dev.azure.com/k200334/DevopsProject/_git/DevopsProject
        fi

        # Fetch and push to Azure Repos
        git fetch azure || echo "Fetching from Azure remote failed"
        git push azure HEAD:main --force || echo "Pushing to Azure remote failed"
      displayName: 'Sync changes to Azure Repos'
      env:
        System.AccessToken: $(System.AccessToken)
